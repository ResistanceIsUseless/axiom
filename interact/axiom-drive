#!/bin/bash
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
rm -r "$HOME/.ssh/sockets" > /dev/null 2>&1
mkdir -p "$HOME/.axiom/tmp"
function help() {
        echo -e "${BWhite}axiom-drive: Creates and mounts remote file share${Color_Off}"
        echo -e "Example Usage: ${Blue}axiom-drive --local ${Color_Off}"
        echo -e "  --local  (Only attach drive to local controller)"
        echo -e "  --fleet  (Only attach drive to remote fleet hosts)"
        echo -e "  --all    (Attach drive to local controller and all remote hosts)"
        echo -e "  --manual (Print out command with token for manually connecting drive)"

} 
#Note: This is a new feature and hasn't been tested rigorously, please submit any issues or enhancement requests https://github.com/pry0cc/axiom/issues @staticbunny
#To do: Add option for custom file share with login/pass - @staticbunny
#To do: Add option for blobfuse - @staticbunny
#To do: Add more options for working with drives such as list drives, list/upload/download files, etc
if [[ "$@" == "--help" ]] || [[ "$@" == "-h" ]] || [[ "$@" == "" ]]; then
help
exit
fi

selected=$(cat $AXIOM_PATH/selected.conf)
command="$1"
function storage_account_create (){
resourceGroupName="axiom"
storageAccountName=$(az storage account list --query '[].{Name:name}' -o tsv | grep axiomstorageaccount)

if [ ! -f $storageAccountName ]; then
    echo "Storage Account Found: $storageAccountName"
else
    echo "Storage Account not found, creating Storage Account."
    az storage account create  --name axiomstorageaccount$RANDOM  --resource-group axiom --location eastus --sku Standard_RAGRS --kind StorageV2 --metadata axiom=true
fi
}
function file_share_create (){
storageAccountName=$(az storage account list --query '[].{Name:name}' -o tsv | grep axiomstorageaccount)
fileShareName=$(az storage share-rm list --storage-account $storageAccountName --resource-group axiom --query '[].{Name:name}' -o tsv | grep axiom)

if [ ! -f $fileShareName ]; then
    echo "FileShare Found: $fileShareName"
else
    echo "FileShare not found, creating FileShare."
    az storage share-rm create --resource-group axiom --storage-account $storageAccountName --name axiom --metadata axiom=true
fi
}
function cred_file_create() {
credentialRoot="~/.axiom/config"
storageAccountName=$(az storage account list --query '[].{Name:name}' -o tsv | grep axiomstorageaccount)
fileShareName=$(az storage share-rm list --storage-account $storageAccountName --resource-group axiom --query '[].{Name:name}' -o tsv | grep axiom)
storageAccountKey=$(az storage account keys list --resource-group axiom  --account-name $storageAccountName --query "[0].value" | tr -d '"')
smbCredentialFile="$credentialRoot/$storageAccountName.cred"
if [ ! -f $smbCredentialFile ]; then
    echo "username=$storageAccountName" | sudo tee $smbCredentialFile > /dev/null
    echo "password=$storageAccountKey" | sudo tee -a $smbCredentialFile > /dev/null
    sudo chmod 600 $smbCredentialFile
else 
    echo "The credential file $smbCredentialFile already exists, and was not modified."
fi
}
function connect_fileshare(){
location=$1
credentialRoot="~/.axiom/config"
storageAccountName=$(az storage account list --query '[].{Name:name}' -o tsv | grep axiomstorageaccount)
fileShareName=$(az storage share-rm list --storage-account $storageAccountName --resource-group axiom --query '[].{Name:name}' -o tsv | grep axiom)
storageAccountKey=$(az storage account keys list --resource-group axiom  --account-name $storageAccountName --query "[0].value" | tr -d '"')
smbCredentialFile="$credentialRoot/$storageAccountName.cred"
httpEndpoint=$(az storage account show --resource-group axiom --name $storageAccountName --query "primaryEndpoints.file" | tr -d '"')
smbPath=$(echo $httpEndpoint | cut -c7-$(expr length $httpEndpoint))$fileShareName
storage_account_create
file_share_create
#cred_file_create
#echo "Copying files to instance(s)"
#scp $smbCredentialFile "/home/op/.$storageAccountName.cred"
mntPath=/home/op/cloudstorage

if [ $location == "local" ]
	then
  echo "Connecting drive locally"
		mkdir $mntPath && sudo mount -t cifs $smbPath $mntPath -o username=$storageAccountName,password=$storageAccountKey,dir_mode=0777,serverino
	elif [ "$location" == "fleet" ]
	then
  echo "Connecting drive on fleet"
		../interact/axiom-execb "mkdir $mntPath" && ../interact/axiom-execb "sudo mount -t cifs $smbPath $mntPath -o username=$storageAccountName,password=$storageAccountKey,dir_mode=0777,serverino"
	elif [ "$location" == "all" ]
	then
    echo "Connecting drive locally"
    mkdir $mntPath && sudo mount -t cifs $smbPath $mntPath -o username=$storageAccountName,password=$storageAccountKey,dir_mode=0777,serverino
    echo "Connecting drive on fleet"	
    ../interact/axiom-execb mkdir $mntPath && ../interact/axiom-execb sudo mount -t cifs $smbPath $mntPath -o username=$storageAccountName,password=$storageAccountKey,dir_mode=0777,serverino
  elif [ "$location" == "manual" ]
	then
    echo "Run the following command:"
    echo "mkdir $mntPath && sudo mount -t cifs $smbPath $mntPath -o username=$storageAccountName,password=$storageAccountKey,dir_mode=0777,serverino"
fi
}
for var in "$@"
do
  if [ "$var" == "--local" ]
  then
  connect_fileshare local
	elif [ "$var" == "--fleet" ]
	then
		connect_fileshare fleet
	elif [ "$var" == "--all" ]
	then
		connect_fileshare all
  elif [ "$var" == "--manual" ]
	then
		connect_fileshare manual
	fi
done

